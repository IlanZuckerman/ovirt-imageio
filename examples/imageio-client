#!/usr/bin/python3
# ovirt-imageio
# Copyright (C) 2018 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

"""
imageio-client - upload and download images to ovirt-imageio server.

Example usage
=============

In this example we will upload Fedora 31 image to ovirt-imageio server, and
dowload the uploaded image.

We can create a test image using virt-builder:

    $ virt-builder fedora-31 -o upload.img

Before we upload, we need to know the the image virtual size:

    $ qemu-img info upload.img
    image: upload.img
    file format: raw
    virtual size: 6 GiB (6442450944 bytes)
    disk size: 1.18 GiB

We need to create the target image. ovirt-imageio does not manage storage, it
only handle the data transfer.

    $ qemu-img create -f raw /var/tmp/test.img 6g

Make the image accessible to ovirt-imageio daemon:

    $ sudo chown ovirtimg:ovirtimg /var/tmp/test.img

Start the ovirt-imageio.service:

    $ systemctl start ovirt-imageio.service

Create a ticket:

    $ cat ticket.json
    {
        "uuid": "test",
        "size": 6442450944,
        "url": "file:///var/tmp/test.img",
        "timeout": 3000,
        "ops": ["read", "write"]
    }

Install the ticket:

    $ curl --unix-socket /run/ovirt-imageio/sock \
          -X PUT \
          --upload-file ticket.json \
          http://localhost/tickets/test

Upload the image:

    $ ./imageio-client --insecure upload \
        upload.img https://host:54322/images/test

Download the image:

    $ ./imageio-client --insecure download \
        --format raw \
        https://host:54322/images/test download.img

You can compare the original image to the downloaded image to check that the
upload and download were correct:

    $ qemu-img compare upload.img download.img

"""

import argparse
import logging

from ovirt_imageio import client


def upload(args):
    with client.ProgressBar() as pb:
        client.upload(
            args.filename,
            args.url,
            args.cafile,
            buffer_size=args.buffer_size,
            secure=args.secure,
            progress=pb)


def download(args):
    with client.ProgressBar() as pb:
        client.download(
            args.url,
            args.filename,
            args.cafile,
            fmt=args.format,
            buffer_size=args.buffer_size,
            secure=args.secure,
            progress=pb)


parser = argparse.ArgumentParser(description="imageio client")

parser.add_argument(
    "-c", "--cafile",
    help="path to CA certificate for verifying server certificate.")

parser.add_argument(
    "--insecure",
    dest="secure",
    action="store_false",
    default=True,
    help=("do not verify server certificates and host name (not "
          "recommened)."))

parser.add_argument(
    "-b", "--buffer-size",
    type=lambda v: int(v) * 1024,
    default=client.BUFFER_SIZE,
    help="buffer size in KiB for performance tuning (default {})"
         .format(client.BUFFER_SIZE // 1024))

parser.add_argument(
    "-v", "--verbose",
    action="store_true",
    help="Be more verbose")

commands = parser.add_subparsers(title="commands")

upload_parser = commands.add_parser(
    "upload",
    help="upload image")
upload_parser.set_defaults(command=upload)
upload_parser.add_argument(
    "filename",
    help="path to image")
upload_parser.add_argument(
    "url",
    help="transfer URL")

download_parser = commands.add_parser(
    "download",
    help="download image")
download_parser.set_defaults(command=download)
download_parser.add_argument(
    "-f", "--format",
    choices=("raw", "qcow2"),
    default="qcow2",
    help=("download image format. The default qcow2 is usually best choice "
          "since it supports incremental backups"))
download_parser.add_argument(
    "--incremental",
    action="store_true",
    help=("download only changed blocks. Can be used only during incremental "
          "backup and requires --format=qcow2"))
download_parser.add_argument(
    "url",
    help="transfer URL")
download_parser.add_argument(
    "filename",
    help="path to image")

args = parser.parse_args()

logging.basicConfig(
    level=logging.DEBUG if args.verbose else logging.WARNING,
    format=("%(asctime)s %(levelname)-7s (%(threadName)s) [%(name)s] "
            "%(message)s"))

args.command(args)
