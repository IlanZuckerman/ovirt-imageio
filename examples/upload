#!/usr/bin/python
# ovirt-imageio
# Copyright (C) 2018 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

"""
upload - example upload script

How to use:

1. Create a ticket json:

    $ cat ticket.json
    {
        "uuid": "test",
        "size": 1073741824,
        "url": "file:///dev/vgname/lvname",
        "timeout": 3000,
        "ops": ["read", "write"]
    }

2. Allow ovirt-imageio-daemon access to the ticket url:

    $ chown vdsm:kvm /dev/vgname/lvname

3. Install the ticket

    $ curl --unix-socket /run/vdsm/ovirt-imageio-daemon.sock \
          -X PUT \
          --upload-file ticket.json \
          http://localhost/tickets/test

4. Upload an image:

    ./upload --insecure /path/to/image https://host:54322/images/test

"""

import argparse
from ovirt_imageio_common import client

parser = argparse.ArgumentParser(description="Upload images")

parser.add_argument(
    "filename",
    help="path to image.")

parser.add_argument(
    "url",
    help="transfer URL.")

parser.add_argument(
    "-u", "--use-unix-socket",
    action="store_true",
    default=False,
    help=("optimize upload using unix socket if the local imageio daemon "
          "supports unix socket. Should be used only if the transfer was "
          "started on the same host."))

parser.add_argument(
    "-c", "--cafile",
    help="path to oVirt engine certificate for verifying server.")

parser.add_argument(
    "--insecure",
    dest="secure",
    action="store_false",
    default=True,
    help=("do not verify server certificates and host name (not "
          "recommened)."))

parser.add_argument(
    "-b", "--buffer-size",
    type=lambda v: int(v) * 1024,
    default=128 * 1024,
    help=("buffer size in kB for upload. The default (128 kB) provides best "
          "results in our tests, but you may like to tune this."))

args = parser.parse_args()

client.upload(
    args.filename,
    args.url,
    args.cafile,
    buffer_size=args.buffer_size,
    use_unix_socket=args.use_unix_socket,
    secure=args.secure)
