#!/usr/bin/python2
# ovirt-imageio
# Copyright (C) 2018 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

"""
upload - example upload script

How to use:

1. Create a ticket json:

    $ cat ticket.json
    {
        "uuid": "test",
        "size": 1073741824,
        "url": "file:///dev/vgname/lvname",
        "timeout": 3000,
        "ops": ["read", "write"]
    }

2. Allow ovirt-imageio-daemon access to the ticket url:

    $ chown vdsm:kvm /dev/vgname/lvname

3. Install the ticket

    $ curl --unix-socket /run/vdsm/ovirt-imageio-daemon.sock \
          -X PUT \
          --upload-file ticket.json \
          http://localhost/tickets/test

4. Upload an image:

    ./upload /path/to/image https://server.address:54322/images/test

"""

import errno
import httplib
import io
import json
import os
import socket
import ssl
import subprocess
import sys
import urlparse

from contextlib import closing

from ovirt_imageio_daemon import uhttp

# You may need to modify the path if you run this on a host which is not
# connected to ovirt engine.
CERTFILE = "/etc/pki/vdsm/certs/cacert.pem"

# This seems to give good perfromance in our tests, you may like to tweek it.
BLOCKSIZE = 128 * 1024

# Set to True later if the server supports the "zero" feature.
can_zero = False

# Set to True later if the server supports the "flush" feature.
can_flush = False


def upload_sparse(con, src):
    """
    Upload a possibly sparse file by sending the data portions using PUT
    request, and reconstructing the holes on the server side using
    PATCH/zero, without reading the zeros from the disk, or sending them
    over the wire.

    This works with ovirt-imageio 1.3 or later.
    """
    out = subprocess.check_output(
        ["qemu-img", "map", "--format", "raw", "--output", "json", filename])
    chunks = json.loads(out.decode("utf-8"))

    # If the server supports "flush", these requests are not waiting
    # until the data is flushed the underlying storage.
    for chunk in chunks:
        if chunk["data"]:
            put(con, url.path, chunk["start"], chunk["length"], src)
        else:
            zero(con, url.path, chunk["start"], chunk["length"])

    # So we flush once after sending all the data.
    if can_flush:
        flush(con, url.path)


def upload(con, src):
    """
    Upload a file using dumb PUT request. Holes in the file are read
    from disk and sent over the wire, and converted to allocated sectors
    full with zeros on the server.

    This works with older versions of ovirt-imageio proxy and daemon.
    """
    put(con, url.path, 0, os.path.getsize(src.name), src)


def put(con, path, start, length, src):
    """
    Send a byte range from path to the server using a PUT request.

    If the server supports the "flush" feature, disable flushing for
    this request.
    """
    if can_flush:
        path += "?flush=n"
    con.putrequest("PUT", path)
    con.putheader("content-type", "application/octet-stream")
    con.putheader("content-length", "%d" %  length)
    con.putheader("content-range", "bytes %d-%d/*"
                  % (start, start + length - 1))
    con.endheaders()

    src.seek(start)

    pos = 0
    while pos < length:
        n = min(length - pos, BLOCKSIZE)
        chunk = src.read(n)
        if not chunk:
            break
        try:
            con.send(chunk)
        except socket.error as e:
            if e[0] != errno.EPIPE:
                raise
            # Server closed the socket.
            break
        pos += len(chunk)

    res = con.getresponse()
    if res.status != httplib.OK:
        raise RuntimeError("put chunk failed: %s" % res.read())


def zero(con, path, start, length):
    """
    Zero a byte range on the server using a PATCH request.

    If the server supports "flush" feature, disable flushing for this
    request.
    """
    msg = {"op": "zero",
           "offset": start,
           "size": length,
           "flush": not can_flush}
    patch(con, path, msg)


def flush(con, path):
    """
    Flush data to underlying storage using a PATCH request.
    """
    msg = {"op": "flush"}
    patch(con, path, msg)


def patch(con, path, msg):
    """
    Send a PATCH request with specified message.
    """
    body = json.dumps(msg).encode("utf-8")
    headers = {"content-type": "application/json",
               "content-length": "%d" %  len(body)}
    con.request("PATCH", path, body=body, headers=headers)
    res = con.getresponse()
    if res.status != httplib.OK:
        raise RuntimeError("patch %s failed: %s" % (msg, res.read()))


def options(con, path):
    """
    Send an OPTIONS request and return the features supported by the
    server for the specified path.
    """
    con.request("OPTIONS", path)
    res = con.getresponse()

    default = {"features": []}

    if res.status == httplib.METHOD_NOT_ALLOWED:
        # Older daemon did not implement OPTIONS
        return default
    elif res.status == httplib.NO_CONTENT:
        # Older proxy did implement OPTIONS but does not return any content.
        return default
    elif res.status != httplib.OK:
        raise RuntimeError("options %s failed: %s" % (path, res.read()))

    # New daemon or proxy provide a features list.
    body = res.read()
    try:
        msg = json.loads(body)
    except ValueError:
        # Bad response, we must assume we don't support any features or unix
        # socket.
        return default

    return msg


# Get input from the user.
filename = sys.argv[1]
url = urlparse.urlparse(sys.argv[2])

context = ssl.create_default_context(
    purpose=ssl.Purpose.SERVER_AUTH, cafile=CERTFILE)

# Check the server capabilities for this image.
con = httplib.HTTPSConnection(url.netloc, context=context)
with closing(con):
    server_options = options(con, url.path)
    can_flush = "flush" in server_options["features"]
    can_zero = "zero" in server_options["features"]

# Open connection for transfering data. If the server supports unix
# socket, we can transfer data faster using less resources.
if "unix_socket" in server_options:
    con = uhttp.UnixHTTPConnection(server_options["unix_socket"])
else:
    con = httplib.HTTPSConnection(url.netloc, context=context)

# Upload the data. If the server supports "zero", we can upload sparse
# files more efficiently.
with closing(con), io.open(filename, "rb") as src:
    if can_zero:
        upload_sparse(con, src)
    else:
        upload(con, src)
